Before we go any further we need to formalise a few ideas. In the last post we used a simple framework to describe our problem:

1. The problem
2. A solution representation
3. Some constraints

These 3 parts are very interlinked but we can try and break them down anyway.

## The problem
The problem is the thing we are trying to solve. To do so we need some function that can tell us how good a particular solution is. This is usually called a fitness or objective function. Any problem can be described in terms of it's decision and objective spaces. A space in mathematics is the whole range of possible values a variable or set of variables can take. The decision space for a problem is the space of the variables you can change. The objective space is the outputs of your function as you move through the decision space.

In the scratch card example we used previously we had two decision variables: (x, y). These variables were constrained to be positive integers/whole numbers between 1 and 10 (1, 2, 3, 4 ... 10). All of the possible combinations of these two variables forms our decision space, ((1, 1), (1, 2), ... (10, 10)). The objective space is then the number in the box each coordinate corresponds too (1-100). Another way of looking at this is the decision space is determined by our choice of solution representation and our objective space is determined by our objective function.

When we only have one or two variables we can easily plot our objective space with respect to the values in the decision space. For example the following figure is for the fitness function _ which only takes one variable:

The properties of the resulting objective space are usually referred to as problem's 'shape'. Maximisation problems with only a single continuous 'hill' are called unimodal. These kind of problems are excellent candidates for local search algorithms (sometimes called hill climbers) as there is a continuous sequence of improving neighbouring solutions. More interesting problems are those with multiple hills (multimodal problems) and those that have flat regions. Simple hill climbers may fail on these problems as they will not be cross regions that do not immediately lead to an improvement.

Much of the objective space is determined my the representation of the problem that you use 

Different problem representations?

- String
- Matrix
- Graph
    - Decision tree
    - Finite State Machine

Constraints
- When well designed the decision space

Exercises:
1. A simple hill climbing algorithm can fail on more complex multimodal problems as they may only find the local optima. What might be a simple solution to this problem? What properties might still be difficult for your updated algorithm?